Photon Fusion KCC Addon - Release History

Last tested with Fusion SDK 0.13.0 RC Nightly Build 430

Version 1.0.8
- KCC now requires kinematic Rigidbody.
- Added default KCC Features to settings (networked).
- Added Prediction Correction as feature (can be suppressed).
- Added KCC.SynchronizeTransform() for explicit synchronization.
- IKCCProcessor.SetInputProperties() is now called also in Interpolate render behavior.
- Added partial KCC.RestoreUserHistoryData() for custom data restoration from local history (input authority only).
- Safe restore of KCCData.IsGrounded from local history if it's synchronized over network and other ground properties are not calculated.

Version 1.0.7
- Compatibility with Fusion SDK 0.13.0 RC Nightly Build 423 (breaking changes).

Version 1.0.6
- Added KCCData.UnscaledDeltaTime - delta time for current fixed/render update, independent of CCD.
- Added KCCData.DesiredPosition - equals to position before depenetration and post-processing.
- Added GetModifier<T>(), GetInteraction<T>() and GetProcessor<T>() to public APIs.
- Added KCC Features - this allows to suppress selected functionality from execution by calling KCC.SuppressFeature().
- Added optional reset of dynamic velocity upon grounding to GroundKCCProcessor.
- Exposed some properties of GroundKCCProcessor and AirKCCProcessor.
- Gravity multiplier in AirKCCProcessor is now applied in SetInputProperties stage.
- Fixed step up conditions to be more restrictive - preventing step up when moving down within ~25° from vertical axis, and angle between penetration direction and move direction is higher than ~85°.
- Step up distance in each tick is now proportional to angle between penetration direction and move direction. This prefers depenetration over direct vertical movement on edges.

Version 1.0.5
- Fixed stage tracing.
- Fixed prediction error correction while simulation and render speed are synchronized.
- Improved step up check direction calculation and step height detection.
- Fixed ground detection on single collision treated as wall.
- Resetting negative vertical DynamicVelocity in GroundKCCProcessor is now less constrained.
- Added KCCSettings.RenderBehavior which controls if the KCC is predicted (immediate response, full physics processing) or interpolated (1 frame delay, more performant, invariant of prediction error due to variable delta time).
- Added KCC.IsProxy - identifies KCC without input and state authority.
- IKCCProcessor.Interpolate() is now called also for input/state authority with EKCCRenderBehavior.Interpolate.

Version 1.0.4
- Improved ground distance computation for mesh and terrain colliders.
- KCCPhysicsUtility.ProjectPenetration() changed to KCCPhysicsUtility.ProjectVerticalPenetration().
- Added Interpolate stage to KCC processor - will be called for all KCC proxies who interact with processor on state authority.
- Render interpolation of KCC proxy is now executed independently of custom interpolation calls from FUN.
- Removed EKCCNetworkTarget (unused).

Version 1.0.3
- Removed implicit initialization with EKCCDriver.Unity from KCC.Start(). This driver must be initialized explicitly.
- Fixed KCCData propagation from fixed to render update and history.
- All editor debug drawings now use KCCDebug.DisplayTime. Control of this property added to KCC inspector.
- Removed optional arguments from KCC.HasInteraction() and KCC.HasProcessor(). Full check is performed always. HasProcessor() now checks also local and settings processors.
- All prefabs with NetworkObject marked as Spawnable.
- Added KCCSettings.Extent (defines additional radius extent for ground detection and processors tracking).
- KCCSettings.CreateCollider replaced by KCCSettings.SpawnColliderOnProxy toggle.
- Removed EKCCNetworkTarget (unused).

Version 1.0.2
- CHANGE: partial methods OnInitialize() and OnDeinitialize() changed to event Action<KCC>.
- CHANGE: renamed CollisionEnter() => OnCollisionEnter and CollisionExit() => OnCollisionExit().
- KCC.IsInFixedUpdate is force set to true while Spawned() chain is pending execution.
- Added list of locally executed processors which accepts IKCCProcessor type - KCC.LocalProcessors.
- Added support for plain C# processors - instance must be added as local processor.
- Added Profiler entries.
- Performance optimizations.
- Added SetMass(), SetLayer() and SetLayerMask() to KCC public API.
- Fixed RefreshChildColliders().
- Initialization refactoring - it is now possible to change KCCSettings properties before first KCC.Initialize() call and these will be treated as default values.
- Calling KCC API now requires Initialize() to be called prior first usage.
- Improved visual debugging.
- Depenetration pass is now skipped when CollisionLayerMask == 0.
- Added EKCCShape.Void for full processing without physics query.
- Optimized synchronization of base networked properties.
- GroundKCCProcessor and AirKCCProcessor are now unsealed partial for extensibility.
- Added KCCCollider data structure for fast property checks and synchronization.

Version 1.0.1
- New depenetration algorithm.
- Fixed ground snapping.

Version 1.0.0
- Initial release.
